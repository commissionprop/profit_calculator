//Position Size calculator with profit loss targets - Enhanced for Futures
    // Set your risk amount, entry price, stop loss price and target price
    // Select futures contract from dropdown for accurate point values
    // position size will be calculated and p/l ratios at 2:1, 3:1 and 4:1 will be plotted

//@version=6
indicator("Futures Position Size Calculator w/ profit targets", "Futures Calc", true)

// Futures contract selection
contractType = input.string("MNQ", "Futures Contract", options=["MNQ", "NQ", "MES", "ES", "MYM", "YM", "MCL", "CL", "MGC", "GC", "SI", "HG", "ZC", "ZS", "ZW", "ZN", "ZB", "Custom"])

// Custom contract inputs (only shown when Custom is selected)
customPointValue = input.float(1.0, "Custom Point Value ($)", tooltip="Point value for custom contract")
customTickSize = input.float(1.0, "Custom Tick Size", tooltip="Tick size for custom contract")

// Function to get contract specifications
getContractSpecs(contract) =>
    pointValue = 0.0
    tickSize = 0.0
    
    if contract == "MNQ"
        pointValue := 2.0
        tickSize := 0.25
    else if contract == "NQ" 
        pointValue := 20.0
        tickSize := 0.25
    else if contract == "MES"
        pointValue := 1.25
        tickSize := 0.25
    else if contract == "ES"
        pointValue := 12.5
        tickSize := 0.25
    else if contract == "MYM"
        pointValue := 0.5
        tickSize := 1.0
    else if contract == "YM"
        pointValue := 5.0
        tickSize := 1.0
    else if contract == "MCL"
        pointValue := 10.0
        tickSize := 0.01
    else if contract == "CL"
        pointValue := 100.0
        tickSize := 0.01
    else if contract == "MGC"
        pointValue := 10.0
        tickSize := 0.1
    else if contract == "GC"
        pointValue := 100.0
        tickSize := 0.1
    else if contract == "SI"
        pointValue := 50.0
        tickSize := 0.005
    else if contract == "HG"
        pointValue := 250.0
        tickSize := 0.0005
    else if contract == "ZC"
        pointValue := 12.5
        tickSize := 0.25
    else if contract == "ZS"
        pointValue := 12.5
        tickSize := 0.25
    else if contract == "ZW"
        pointValue := 12.5
        tickSize := 0.125
    else if contract == "ZN"
        pointValue := 15.625
        tickSize := 0.015625
    else if contract == "ZB"
        pointValue := 31.25
        tickSize := 0.03125
    else // Custom
        pointValue := customPointValue
        tickSize := customTickSize
    
    [pointValue, tickSize]

// Get contract specifications
[pointValue, tickSize] = getContractSpecs(contractType)

// Input variables
riskamt = input.float(400.0, title="Risk Amount ($)")
entry = input.float(0.0, title="Entry Price")
sl = input.float(0.0, title = "Stop Loss Price")
tp = input.float(0.0, title="Target Price")

//Calculated variables
sldist = math.abs(entry - sl)
tgdist = math.abs(tp - entry) 
rr = tgdist / sldist
contracts = riskamt / (sldist * pointValue)
roundedContracts = math.round(contracts)
riskPerContract = sldist * pointValue
totalActualRisk = roundedContracts * riskPerContract
rewardAmount = roundedContracts * tgdist * pointValue
sldistTicks = sldist / tickSize
tgdistTicks = tgdist / tickSize

// Determine if long or short based on entry vs stop loss
isLong = entry > sl

// Calculate profit target levels based on position direction
min = isLong ? entry + (1 * sldist) : entry - (1 * sldist)
pt1 = isLong ? entry + (2 * sldist) : entry - (2 * sldist)
pt2 = isLong ? entry + (3 * sldist) : entry - (3 * sldist)
pt3 = isLong ? entry + (4 * sldist) : entry - (4 * sldist)

//Plotted indicators based on input and calculated variables 
entryp = plot(entry, display = display.pane, title="Entry", color=#787b8600, show_last=20, offset=20)
tpp    = plot(tp   , display = display.pane, title="TP"   , color=#4caf5000, show_last=20, offset=20)
slp    = plot(sl   , display = display.pane, title="SL"   , color=#ff525200, show_last=20, offset=20)
fill(entryp, tpp, color=color.new(color.green, 80), show_last=1)
fill(entryp, slp, color=color.new(color.red, 80), show_last=1)

pt1to1line = plot(series=min, color=color.new(color.yellow, 30), title="1:1", linewidth=1, show_last=20, offset=20)
pt1line    = plot(series=pt1, color=color.new(color.green, 30), title="2:1", linewidth=1, show_last=20, offset=20)
pt2line    = plot(series=pt2, color=color.new(color.green, 30), title="3:1", linewidth=1, show_last=20, offset=20)
pt3line    = plot(series=pt3, color=color.new(color.green, 30), title="4:1", linewidth=1, show_last=20, offset=20)

// Add labels for P/L ratio lines
if barstate.islast and entry != 0 and sl != 0
    // Create labels for each P/L ratio line
    var label label_1to1 = na
    var label label_2to1 = na
    var label label_3to1 = na
    var label label_4to1 = na
    
    // Delete previous labels
    label.delete(label_1to1)
    label.delete(label_2to1)
    label.delete(label_3to1)
    label.delete(label_4to1)
    
    // Create new labels positioned at the end of each line
    label_1to1 := label.new(bar_index + 21, min, "1:1", 
                           color=color.new(color.yellow, 100), 
                           textcolor=color.yellow, 
                           style=label.style_label_left,
                           size=size.small)
    
    label_2to1 := label.new(bar_index + 21, pt1, "2:1", 
                           color=color.new(color.green, 100), 
                           textcolor=color.green, 
                           style=label.style_label_left,
                           size=size.small)
    
    label_3to1 := label.new(bar_index + 21, pt2, "3:1", 
                           color=color.new(color.green, 100), 
                           textcolor=color.green, 
                           style=label.style_label_left,
                           size=size.small)
    
    label_4to1 := label.new(bar_index + 21, pt3, "4:1", 
                           color=color.new(color.green, 100), 
                           textcolor=color.green, 
                           style=label.style_label_left,
                           size=size.small)

// Text overlay with fixed position in bottom right
showscr = input.bool(true, "Show Position Size Label")
col = input.color(color.white, title="Text Color")
textSize = input.string("Small", "Text Size", options=["Tiny", "Small", "Normal", "Large", "Huge"])

if showscr and barstate.islast
    // Create a table positioned in bottom right corner
    var table infoTable = table.new(position.bottom_right, 1, 1, 
                                   bgcolor=color.new(color.black, 85), 
                                   border_width=1, 
                                   border_color=color.gray)
    
    // Convert text size string to size constant
    tableTextSize = textSize == "Tiny" ? size.tiny :
                   textSize == "Small" ? size.small :
                   textSize == "Normal" ? size.normal :
                   textSize == "Large" ? size.large : size.huge
    
    // Format the text content
    txt = "Contract: " + contractType + 
          " (Point Value: $" + str.tostring(pointValue, "#.##") + ")" +
          "\nRisk Amount: $" + str.tostring(riskamt, "#") + 
          "\nR:R Ratio: " + str.tostring(rr, "#.##") + ":1" +
          "\nReward Amount: $" + str.tostring(rewardAmount, "#.#") +
          "\n\nEntry: " + str.tostring(entry, "#.##") + 
          "\nTarget: " + str.tostring(tp, "#.##") + 
          "\nStop Loss: " + str.tostring(sl, "#.##") + 
          "\nStop Distance: " + str.tostring(sldist, "#.##") + " pts/" + str.tostring(sldistTicks, "#") + " ticks" +
          "\nTarget Distance: " + str.tostring(tgdist, "#.##") + " pts/" + str.tostring(tgdistTicks, "#") + " ticks" +
          "\n\nContracts: " + str.tostring(roundedContracts, "#") +
          "\nRisk/Contract: $" + str.tostring(totalActualRisk, "#.#") + "/$" + str.tostring(riskPerContract, "#.#")
    
    // Update table content
    table.cell(infoTable, 0, 0, txt, text_color=col, text_size=tableTextSize)